Exo 1 : Compil -> ERROR faut initialiser le hashmap -> go help README https://doc.rust-lang.org/book/ch08-03-hash-maps.html
            let mut basket = HashMap::new();
        TEST --> ça compile mais failed test    

        Au vu des test il faut au moins trois fruit different et un total supérieur ou égale à 5 
        assert!(basket.len() >= 3 //////// assert!(basket.values().sum::<u32>() >= 5) 

        Ajout de deux fruit dans le hashmap : 

    basket.insert(String::from("chips"), 2);
    basket.insert(String::from("saucisson"), 2);

        TEST ----> ça fonctionne !!! 


Exo 2 : Compil sans modif , ERROR, compil sans "for fruit in fruit_kinds" fonctionne, test ne fonctionne pas 
        Selon les test il faut au moins 11 fruits 
        Donc en premier on check si le fruit n'est pas déjà dans le panier
      if !basket.contains_key(&fruit)
        Si c'est le premier fruit on en ajoute 10 (pour le test) sinon 1 
      if index == 0 {basket.insert(*fruit, 10);} 
      else {basket.insert(*fruit, 1);}

        TEST => ERROR -> copy trait --> ajout copy : #[derive(Copy, PartialEq, Eq, Hash)]
                ERROR -> clone trait -> ajout clone: #[derive(Clone, Copy, PartialEq, Eq, Hash)]
                ERROR -> index -> modif "for fruit" -> "for (index,fruit)
                ERROR -> modif "fruit_kinds" -> "fruit_kinds.iter().enumerate()" --------> ça fonctionne 

Exo 3 Compil sans modif -> Plein d'erreur 
      Choix du Derive, pour éviter les problème j'en met plein : #[derive(Default, Clone, Copy, Hash, PartialEq, Eq)]
      Ensuite creer les variable, on clone les variable non mutable 
       let team_1 = scores.entry(team_1_name.clone()).or_insert_with(Team::default);
       let team_2 = scores.entry(team_2_name.clone()).or_insert_with(Team::default);
      On met à jour les buts des deux équipes après un match avec des incrementation : 
       team_1.goals_scored += team_1_score;
       team_1.goals_conceded += team_2_score;

       team_2.goals_scored += team_2_score;
       team_2.goals_conceded += team_1_score;

      TEST -> ERROR non mutable
       let mut team_1 = scores.entry(team_1_name.clone()).or_insert_with(Team::default);
       let mut team_2 = scores.entry(team_2_name.clone()).or_insert_with(Team::default);

      TEST -> ERROR borrow scores  // ajout de clone pour les variable team_1 et team_2, puis update de la variable score
       let mut cloned_scores = scores.clone();
       let mut team_1 = cloned_scores.entry(team_1_name.clone()).or_insert_with(Team::default);
       let mut team_2 = cloned_scores.entry(team_2_name.clone()).or_insert_with(Team::default);
       scores.extend(cloned_scores);

      TEST -> ERROR 
       let mut cloned_scores = scores.clone();
       let mut cloned_scores2 = scores.clone();
       let mut team_1 = cloned_scores.entry(team_1_name.clone()).or_insert_with(Team::default);
       let mut team_2 = cloned_scores2.entry(team_2_name.clone()).or_insert_with(Team::default);
       scores.extend(cloned_scores);       
       scores.extend(cloned_scores2);


      


