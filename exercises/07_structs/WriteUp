Exo 1 : lecture TODO, Instantiate a unit-like struct! -> let unit_like_struct = UnitLikeStruct; /// ajout de la seul structure unit-like 
        Tentative compilation -> cannot find value `green` -> ces erreurs apparaissent dans des comparaisons, donc ajout de green red et blue dans la structure
        egalement présent dans les comparaisons 
        Same error -> me manque quelque chose ! 

        Les fonctions de test necessite l'initialisation de let green 
        Recherche "rust classic c struct" 
        test: let green = ColorClassicStruct { red: 0, green: 255, blue: 0 };   // valeur en lien avec les test réaliser juste après 
        0 error sur: fn classic_c_structs --> ça fonctionne 

        Ensuite fn tuple_structs 
        test: let green = ColorTupleStruct(0, 255, 0)
        error ? "unexpected argument of type"
        Struct ColorTupleStruct encore en TODO, implementation des types -> struct ColorTupleStruct(i32, i32, i32); --> ça fonctionne ! 

Exo 2 : Que un TODO, test compilation -> "error, unknown field" 
        test: let your_order = &order_template; pour recupérer les valeur, ça compile mais le test ne fonctionne pas 
        Situation similaire la doc donnée dans le README et users.rust-lang.org 

        il faut utiliser: let your_order = Order { ..order_template };   // ça compile avec juste ça mais le test ne fonctionne encore pas
        il y a déjà la sortie Order dans la fonction create_order_template
        Au vu des test il faut modifier le count et la strg 
        test : let your_order = Order{
                                name: String::from("Hacker in Rust")
                                  ..order_template};                   -> error -> oubli "," 

        test : let your_order = Order{
                                name: String::from("Hacker in Rust"),
                                ..order_template};                     -> compile mais test fail 

        Je vais supprimer la partie "assert_eq!(your_order.count, 1);" 
        Le test est bon, je dois modifier le count 
        Test : let your_order = Order{ 
                                name: String::from("Hacker in Rust"),
                                count: 1,
          	                    ..order_template};                       --> ça conftionne ! 
        
        
Exo 3 : Demande de definir les type de sortie, is_international est une demande booléenne, en effet soit c'est internationnal, soit ça ne l'est pas 
        fn is_international(&self) -> bool
        Vérifier si sender_country = recipient_country
        Recherche sur les comparaison en rust, test : 

    fn is_international(&self) -> bool {
        sender_country != recipient_country
    }

        Error -> compilateur propose self.sender_country != self.recipient_country  //// test -> ça compile ! 
        Supprime get_fees et les test en lien, pour voir si les test concernant is_internantional sont bon /// test --> ça fonctionne 

        fn get_fees maintenant, entrée en u32 test sortie en u32 
        test : self.weight_in_grams != cents_per_gram -> error booléen
        test : self.weight_in_grams = cents_per_gram -> error 
        test : self.weight_in_grams + cents_per_gram -> compile ! but failed test 
        test : self.weight_in_grams * cents_per_gram -> compile ! test ok                 ---> ça fonctionne 
        

